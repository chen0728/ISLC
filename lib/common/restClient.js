// Generated by CoffeeScript 1.9.3
(function() {
  var Client, Promise, RestClient, systemBearerToken;

  Client = require('node-rest-client').Client;

  Promise = require('bluebird');

  systemBearerToken = require(process.cwd() + '/lib/common/config').systemBearerToken;

  RestClient = (function() {
    function RestClient(options) {
      var baseUrl, client, setDefaultArgs;
      options.mimetypes = {
        json: ["application/json", "application/json; charset=utf-8"],
        xml: ["application/xml", "application/xml; charset=utf-8"]
      };
      baseUrl = options.baseUrl || 'http://127.0.0.1';
      client = new Client(options);
      setDefaultArgs = function(args) {
        var authorizationAddedFlag;
        args = args || {};
        args.headers = args.headers || {};
        args.headers['Content-Type'] = args.headers['Content-Type'] || 'application/json; charset=utf-8';
        authorizationAddedFlag = false;
        if (!authorizationAddedFlag && args.req && args.req.headers && args.req.headers.authorization) {
          args.headers['Authorization'] = args.req.headers.authorization;
          authorizationAddedFlag = true;
        }
        if (!authorizationAddedFlag && args.req && args.req.user && args.req.user.tokenId) {
          args.headers['Authorization'] = 'Bearer ' + args.req.user.tokenId;
          authorizationAddedFlag = true;
        }
        if (!authorizationAddedFlag && args.system) {
          args.headers['Authorization'] = 'Bearer ' + systemBearerToken;
          authorizationAddedFlag = true;
        }
        if (!authorizationAddedFlag && args.req && args.req.headers && args.req.headers.cookie) {
          args.headers['Cookie'] = args.req.headers.cookie;
          return authorizationAddedFlag = true;
        }
      };
      this.get = function(url, args) {
        setDefaultArgs(args);
        return new Promise(function(resolve, reject) {
          return client.get(baseUrl + url, args, function(data, response) {
            if (parseInt(response.statusCode / 100) === 2 || parseInt(response.statusCode / 100) === 3) {
              response.body = data;
              return resolve(response);
            } else {
              response.body = data.toString();
              return reject(response);
            }
          }).on('error', function(err) {
            console.log('rest client @get error: ' + baseUrl + url);
            return reject(err);
          });
        });
      };
      this.post = function(url, args) {
        setDefaultArgs(args);
        return new Promise(function(resolve, reject) {
          return client.post(baseUrl + url, args, function(data, response) {
            if (parseInt(response.statusCode / 100) === 2 || parseInt(response.statusCode / 100) === 3) {
              response.body = data;
              return resolve(response);
            } else {
              response.body = data.toString();
              return reject(response);
            }
          }).on('error', function(err) {
            console.log('rest client @post error: ' + baseUrl + url);
            return reject(err);
          });
        });
      };
      this.put = function(url, args) {
        setDefaultArgs(args);
        return new Promise(function(resolve, reject) {
          return client.put(baseUrl + url, args, function(data, response) {
            if (parseInt(response.statusCode / 100) === 2 || parseInt(response.statusCode / 100) === 3) {
              response.body = data;
              return resolve(response);
            } else {
              response.body = data.toString();
              return reject(response);
            }
          }).on('error', function(err) {
            console.log('rest client @put error: ' + baseUrl + url);
            return reject(err);
          });
        });
      };
      this["delete"] = function(url, args) {
        setDefaultArgs(args);
        return new Promise(function(resolve, reject) {
          return client["delete"](baseUrl + url, args, function(data, response) {
            if (parseInt(response.statusCode / 100) === 2 || parseInt(response.statusCode / 100) === 3) {
              response.body = data;
              return resolve(response);
            } else {
              response.body = data.toString();
              return reject(response);
            }
          }).on('error', function(err) {
            console.log('rest client @delete error: ' + baseUrl + url);
            return reject(err);
          });
        });
      };
      this.patch = function(url, args) {
        setDefaultArgs(args);
        return new Promise(function(resolve, reject) {
          return client.patch(baseUrl + url, args, function(data, response) {
            if (parseInt(response.statusCode / 100) === 2 || parseInt(response.statusCode / 100) === 3) {
              response.body = data;
              return resolve(response);
            } else {
              response.body = data.toString();
              return reject(response);
            }
          }).on('error', function(err) {
            console.log('rest client @patch error: ' + baseUrl + url);
            return reject(err);
          });
        });
      };
    }

    return RestClient;

  })();

  module.exports = RestClient;

}).call(this);
